//
// automatically generated by spin2cpp v1.06 on Thu Mar 26 03:46:33 2015
// spin2cpp BALAPILLER.spin 
//

#include <propeller.h>
#include "Synth.h"

#ifdef __GNUC__
#define INLINE__ static inline
#define BitEncode__(X) (32 - __builtin_clz(X))
#define PostEffect__(X, Y) __extension__({ int32_t tmp__ = (X); (X) = (Y); tmp__; })
#else
#define INLINE__ static
static int32_t tmp__;
#define PostEffect__(X, Y) (tmp__ = (X), (X) = (Y), tmp__)
#endif

INLINE__ int32_t Min__(int32_t a, int32_t b) { return a < b ? a : b; }
INLINE__ int32_t Max__(int32_t a, int32_t b) { return a > b ? a : b; }
int32_t SynthSpin::Synth(int32_t Ctr_ab, int32_t Pin, int32_t Freq)
{
  int32_t	S, D, Ctr, Frq;
  Freq = (Min__((Max__(Freq, 0)), 128000000));
  if (Freq < 500000) {
    Ctr = 0x10000000;
    S = 1;
  } else {
    Ctr = 0x8000000;
    D = (BitEncode__(((Freq - 1) / 1000000)));
    S = (4 - D);
    Ctr = (Ctr | (D << 23));
  }
  Frq = Fraction(Freq, CLKFREQ, S);
  Ctr = (Ctr | Pin);
  if (Ctr_ab == 'A') {
    CTRA = Ctr;
    FRQA = Frq;
    DIRA = ((DIRA & (~(1 << Pin))) | (1 << Pin));
  }
  if (Ctr_ab == 'B') {
    CTRB = Ctr;
    FRQB = Frq;
    DIRA = ((DIRA & (~(1 << Pin))) | (1 << Pin));
  }
  return 0;
}

int32_t SynthSpin::Silence_a(int32_t Pin)
{
  Synth('A', Pin, 0);
  return 0;
}

int32_t SynthSpin::Silence_b(int32_t Pin)
{
  Synth('B', Pin, 0);
  return 0;
}

int32_t SynthSpin::Fraction(int32_t A, int32_t B, int32_t Shift)
{
  int32_t F = 0;
  if (Shift > 0) {
    A = (A << Shift);
  }
  if (Shift < 0) {
    B = (B << (-Shift));
  }
  {
    int32_t _idx__0037;
    for(_idx__0037 = 1; _idx__0037 <= 32; (_idx__0037 = (_idx__0037 + 1))) {
      F = (F << 1);
      if (A >= B) {
        A = (A - B);
        (F++);
      }
      A = (A << 1);
    }
  }
  return F;
}

